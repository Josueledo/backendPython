import time
import re
import os

# Caminho do arquivo de log
log_file_path = r"C:\Users\Josue Ledo\Desktop\crud-tcc\logs/application.log"

# Regex corrigida para permitir mais flexibilidade
pattern = re.compile(r".*Requisicao recebida: IP=(?P<ip>[0-9a-fA-F:\.]+) Metodo=(?P<method>\S+) URI=(?P<uri>\S+) Query=(?P<query>.*?) User-Agent=(?P<agent>.+)")

# Fun√ß√£o para processar os logs
def process_log_line(log_line):
    print(f"üìú Log recebido: {log_line}")  # Exibir log recebido
    
    match = pattern.search(log_line)  # Mudan√ßa para `search` para flexibilizar a busca
    
    if match:
        ip = match.group('ip')
        method = match.group('method')
        uri = match.group('uri')
        query = match.group('query')
        agent = match.group('agent')

        print(f"‚úÖ Match encontrado! IP: {ip}, M√©todo: {method}, URI: {uri}, Query: {query}, Agente: {agent}")
        
        # Exemplo de detec√ß√£o de poss√≠veis ataques
        if method == "POST" and "login" in uri.lower():
            print(f"‚ö†Ô∏è Poss√≠vel ataque de for√ßa bruta detectado de {ip} na URI {uri}.")
        
        # Detec√ß√£o de m√∫ltiplas tentativas de login
        if method == "POST" and "login" in uri.lower() and "user=" in query:
            print(f"‚ö†Ô∏è Tentativa de login com usu√°rio suspeito: {query} de {ip}.")
    else:
        print("‚ùå Nenhuma correspond√™ncia encontrada!")

# Leitura cont√≠nua do arquivo de log (tail -f)
def tail_f(log_path):
    print(f"üöÄ Monitorando logs em tempo real: {log_path}")

    with open(log_path, "r", encoding="utf-8") as file:
        file.seek(0, os.SEEK_END)  # Vai para o final do arquivo

        while True:
            line = file.readline()  # L√™ a pr√≥xima linha
            if not line:
                time.sleep(0.1)  # Pequena pausa para evitar alto uso da CPU
                continue

            process_log_line(line.strip())  # Processa a linha nova

try:
    tail_f(log_file_path)
except KeyboardInterrupt:
    print("\nüõë Monitoramento encerrado pelo usu√°rio.")
